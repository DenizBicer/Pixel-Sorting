#pragma kernel Init
#pragma kernel Sort

struct Agent
{
	float2 position;
    float3 hsv;
};

RWStructuredBuffer<Agent> AgentBuffer;
RWTexture2D<float4> Image;

//RGB - HSV conversions from https://gist.github.com/yiwenl/745bfea7f04c456e0101 yiwenl/hsv2rgb
float3 HSVtoRGB(float3 HSV)
{

    float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    float3 p = abs(frac(HSV.xxx + K.xyz) * 6.0 - K.www);
    return HSV.z * lerp(K.xxx, clamp(p - K.xxx, 0.0, 1.0), HSV.y);
}

//RGB - HSV conversions from https://gist.github.com/yiwenl/745bfea7f04c456e0101 yiwenl/hsv2rgb
float3 RGBtoHSV(float3 rgb) {
 	float Cmax = max(rgb.r, max(rgb.g, rgb.b));
 	float Cmin = min(rgb.r, min(rgb.g, rgb.b));
 	float delta = Cmax - Cmin;

 	float3 hsv = float3(0., 0., Cmax);

 	if (Cmax > Cmin) {
 		hsv.y = delta / Cmax;

 		if (rgb.r == Cmax)
 			hsv.x = (rgb.g - rgb.b) / delta;
 		else {
 			if (rgb.g == Cmax)
 				hsv.x = 2. + (rgb.b - rgb.r) / delta;
 			else
 				hsv.x = 4. + (rgb.r - rgb.g) / delta;
 		}
 		hsv.x = frac(hsv.x / 6.);
 	}
 	return hsv;
 }


[numthreads(16,1,1)]
void Init(uint3 id: SV_DISPATCHTHREADID)
{
    float2 position = float2(0.0, id.x);
    float3 hsv = RGBtoHSV(Image[position].rgb);
	AgentBuffer[id.x].position = position;
    AgentBuffer[id.x].hsv = hsv;
}

float currentColumn;
float decayAmount;
float valueThreshold;
float alphaCutOut;
float hueSimilarityRange;

[numthreads(16,1,1)]
void Sort (uint3 id : SV_DispatchThreadID)
{
    float2 position = AgentBuffer[id.x].position;
    float2 newPosition = float2(currentColumn, id.x);
    
    float3 hsv = AgentBuffer[id.x].hsv;
    float3 newHsv = RGBtoHSV(Image[newPosition].rgb);

    if( abs(hsv.x- newHsv.x )< hueSimilarityRange && newHsv.z < valueThreshold)
    {
        float value = hsv.z - decayAmount;
        value = saturate(value);
        float3 newHSV = float3(hsv.x, hsv.y, value);
        AgentBuffer[id.x].hsv = newHSV;
        float3 rgb = HSVtoRGB(newHSV).rgb;        
        Image[newPosition] = float4(rgb.r, rgb.g, rgb.b, step(alphaCutOut,value));
    }
    else
    {
         AgentBuffer[id.x].hsv = newHsv;
    }

    AgentBuffer[id.x].position = newPosition;
}
