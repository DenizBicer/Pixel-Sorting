#pragma kernel Init
#pragma kernel Sort

#include "ClassicNoise2D.cginc"

struct Agent
{
	float2 position;
    float3 hsv;
};

RWStructuredBuffer<Agent> AgentBuffer;
RWTexture2D<float4> Image;

float3 HSVtoRGB(float3 HSV)
{
    float3 RGB = 0;
    float C = HSV.z * HSV.y;
    float H = HSV.x * 6;
    float X = C * (1 - abs(fmod(H, 2) - 1));
    if (HSV.y != 0)
    {
        float I = floor(H);
        if (I == 0) { RGB = float3(C, X, 0); }
        else if (I == 1) { RGB = float3(X, C, 0); }
        else if (I == 2) { RGB = float3(0, C, X); }
        else if (I == 3) { RGB = float3(0, X, C); }
        else if (I == 4) { RGB = float3(X, 0, C); }
        else { RGB = float3(C, 0, X); }
    }
    float M = HSV.z - C;
    return RGB + M;
}

float3 RGBtoHSV(float3 RGB)
{
    float3 HSV = 0;
    float M = min(RGB.r, min(RGB.g, RGB.b));
    HSV.z = max(RGB.r, max(RGB.g, RGB.b));
    float C = HSV.z - M;
    if (C != 0)
    {
        HSV.y = C / HSV.z;
        float3 D = (((HSV.z - RGB) / 6) + (C / 2)) / C;
        if (RGB.r == HSV.z)
            HSV.x = D.b - D.g;
        else if (RGB.g == HSV.z)
            HSV.x = (1.0/3.0) + D.r - D.b;
        else if (RGB.b == HSV.z)
            HSV.x = (2.0/3.0) + D.g - D.r;
        if ( HSV.x < 0.0 ) { HSV.x += 1.0; }
        if ( HSV.x > 1.0 ) { HSV.x -= 1.0; }
    }
    return HSV;
}


[numthreads(8,1,1)]
void Init(uint3 id: SV_DISPATCHTHREADID)
{
    float2 position = float2(0.0, id.x);
    float3 hsv = RGBtoHSV(Image[position].rgb);
	AgentBuffer[id.x].position = position;
    AgentBuffer[id.x].hsv = hsv;
}

float currentColumn;
float decayAmount;
float valueThreshold;
float alphaCutOut;
[numthreads(8,1,1)]
void Sort (uint3 id : SV_DispatchThreadID)
{
    float2 position = AgentBuffer[id.x].position;
    float2 newPosition = float2(currentColumn, id.x);
    
    float3 hsv = AgentBuffer[id.x].hsv;
    float3 newHsv = RGBtoHSV(Image[newPosition].rgb);

    if( abs(hsv.x- newHsv.x )< 0.1 && newHsv.z < valueThreshold)
    {
        // float value = hsv.z - cnoise(newPosition) * decayAmount;
        float value = hsv.z - decayAmount;
        value = saturate(value);
        float3 newHSV = float3(hsv.x, hsv.y, value);
        AgentBuffer[id.x].hsv = newHSV;
        float3 rgb = HSVtoRGB(newHSV).rgb;        
        Image[newPosition] = float4(rgb.r, rgb.g, rgb.b, step(alphaCutOut,value));
    }
    else
    {
         AgentBuffer[id.x].hsv = newHsv;
    }

    AgentBuffer[id.x].position = newPosition;
}
